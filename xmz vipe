let replacements = {};
let dumpedVarNames = {};
const storeName = "a" + crypto.randomUUID().replaceAll("-", "").substring(16);
const xmzName = crypto.randomUUID().replaceAll("-", "").substring(16);

// ANTICHEAT HOOK
function replaceAndCopyFunction(oldFunc, newFunc) {
	return new Proxy(oldFunc, {
		apply(orig, origIden, origArgs) {
			const result = orig.apply(origIden, origArgs);
			newFunc(result);
			return result;
		},
		get(orig) { return orig; }
	});
}

Object.getOwnPropertyNames = replaceAndCopyFunction(Object.getOwnPropertyNames, function(list) {
	if (list.indexOf(storeName) != -1) list.splice(list.indexOf(storeName), 1);
	return list;
});
Object.getOwnPropertyDescriptors = replaceAndCopyFunction(Object.getOwnPropertyDescriptors, function(list) {
	delete list[storeName];
	return list;
});

function addReplacement(replacement, code, replaceit) {
	replacements[replacement] = [code, replaceit];
}

function addDump(replacement, code) {
	dumpedVarNames[replacement] = code;
}

function modifyCode(text) {
	for(const [name, regex] of Object.entries(dumpedVarNames)){
		const matched = text.match(regex);
		if (matched) {
			console.log(name, regex, matched);
			for(const [replacement, code] of Object.entries(replacements)){
				delete replacements[replacement];
				replacements[replacement.replaceAll(name, matched[1])] = [code[0].replaceAll(name, matched[1]), code[1]];
			}
		}
	}

	for(const [replacement, code] of Object.entries(replacements)){
		text = text.replaceAll(replacement, code[1] ? code[0] : replacement + code[0]);
	}

	var newScript = document.createElement("script");
	newScript.type = "module";
	newScript.crossOrigin = "";
	newScript.textContent = text;
	var head = document.querySelector("head");
	head.appendChild(newScript);
	newScript.textContent = "";
	newScript.remove();
}

(function() {
	'use strict';

	// Modules organized alphabetically
	new Module("AntiBan", function() {});
	new Module("AntiFall", function(callback) {
		if (callback) {
			let ticks = 0;
			tickLoop["AntiFall"] = function() {
				const ray = rayTraceBlocks(player$1.getEyePos(), player$1.getEyePos().clone().setY(0), false, false, false, game$1.world);
				if (player$1.fallDistance > 2.8 && !ray) {
					player$1.motion.y = 0;
				}
			};
		}
		else delete tickLoop["AntiFall"];
	});
	new Module("AutoArmor", function(callback) {
		if (callback) {
			tickLoop["AutoArmor"] = function() {
				if (player$1.openContainer == player$1.inventoryContainer) {
					for(let i = 0; i < 4; i++) {
						const slots = player$1.inventoryContainer.inventorySlots;
						const slot = getArmorSlot(i, slots);
						if (slot != i) {
							if (slots[i].getHasStack()) {
								playerControllerDump.windowClickDump(player$1.openContainer.windowId, i, 0, 0, player$1);
								playerControllerDump.windowClickDump(player$1.openContainer.windowId, -999, 0, 0, player$1);
							}
							playerControllerDump.windowClickDump(player$1.openContainer.windowId, slot, 0, 1, player$1);
						}
					}
				}
			};
		}
		else delete tickLoop["AutoArmor"];
	});
	new Module("AutoClicker", function(callback) {
		if (callback) {
			tickLoop["AutoClicker"] = function() {
				if (clickDelay < Date.now() && playerControllerDump.key.leftClick && !player$1.isUsingItem()) {
					playerControllerDump.leftClick();
					clickDelay = Date.now() + 60;
				}
			};
		} else delete tickLoop["AutoClicker"];
	});
	new Module("AutoCraft", function(callback) {
		if (callback) {
			tickLoop["AutoCraft"] = function() {
				if (checkDelay < Date.now() && player$1.openContainer == player$1.inventoryContainer) {
					checkDelay = Date.now() + 300;
					if (!player$1.inventory.hasItem(Items.emerald_sword)) craftRecipe(recipes[1101][0]);
				}
			};
		}
		else delete tickLoop["AutoCraft"];
	});
	new Module("AutoQueue", function() {});
	new Module("AutoRejoin", function() {});
	new Module("AutoRespawn", function() {});
	new Module("AutoVote", function() {});
	new Module("Breaker", function(callback) {
		if (callback) {
			let attemptDelay = {};
			tickLoop["Breaker"] = function() {
				if (breakStart > Date.now()) return;
				let offset = breakerrange[1];
				for (const block of BlockPos.getAllInBoxMutable(new BlockPos(player$1.pos.x - offset, player$1.pos.y - offset, player$1.pos.z - offset), new BlockPos(player$1.pos.x + offset, player$1.pos.y + offset, player$1.pos.z + offset))) {
					if (game$1.world.getBlockState(block).getBlock() instanceof BlockDragonEgg) {
						if ((attemptDelay[block] || 0) > Date.now()) continue;
						attemptDelay[block] = Date.now() + 500;
						ClientSocket.sendPacket(new SPacketClick({
							location: block
						}));
					}
				}
			};
		}
		else delete tickLoop["Breaker"];
	});
	new Module("Chams", function() {});
	new Module("ChestSteal", function(callback) {
		if (callback) {
			tickLoop["ChestSteal"] = function() {
				if (player$1.openContainer && player$1.openContainer instanceof ContainerChest) {
					for(let i = 0; i < player$1.openContainer.numRows * 9; i++) {
						const slot = player$1.openContainer.inventorySlots[i];
						const item = slot.getHasStack() ? slot.getStack().getItem() : null;
						if (item && (item instanceof ItemSword || item instanceof ItemArmor || item instanceof ItemAppleGold || cheststealblocks[1] && item instanceof ItemBlock || cheststealtools[1] && item instanceof ItemTool)) {
							playerControllerDump.windowClickDump(player$1.openContainer.windowId, i, 0, 1, player$1);
						}
					}
				}
			};
		}
		else delete tickLoop["ChestSteal"];
	});
	new Module("FilterBypass", function() {});
	new Module("Fly", function(callback) {
		if (callback) {
			let ticks = 0;
			tickLoop["Fly"] = function() {
				ticks++;
				const dir = getMoveDirection(0.39);
				player$1.motion.x = dir.x;
				player$1.motion.z = dir.z;
				player$1.motion.y = keyPressedDump("space") ? flyvert[1] : (keyPressedDump("shift") ? -flyvert[1] : 0);
			};
		}
		else {
			delete tickLoop["Fly"];
			if (player$1) {
				player$1.motion.x = Math.max(Math.min(player$1.motion.x, 0.3), -0.3);
				player$1.motion.z = Math.max(Math.min(player$1.motion.z, 0.3), -0.3);
			}
		}
	});
	new Module("InvWalk", function() {});
	new Module("KeepSprint", function() {});
	new Module("Killaura", function(callback) {
		if (callback) {
			// Implementation for Killaura
		}
		else {
			// Cleanup for Killaura
		}
	});
	new Module("NoFall", function(callback) {
		if (callback) {
			let ticks = 0;
			tickLoop["NoFall"] = function() {
				const ray = rayTraceBlocks(player$1.getEyePos(), player$1.getEyePos().clone().setY(0), false, false, false, game$1.world);
				if (player$1.fallDistance > 2.5 && ray) {
					ClientSocket.sendPacket(new SPacketPlayerPosLook({pos: {x: player$1.pos.x, y: ray.hitVec.y, z: player$1.pos.z}, onGround: true}));
					player$1.fallDistance = 0;
				}
			};
		}
		else delete tickLoop["NoFall"];
	});
	new Module("NoSlowdown", function() {});
	new Module("Phase", function() {});
	new Module("Scaffold", function(callback) {
		if (callback) {
			if (player$1) oldHeld = game$1.info.selectedSlot;
			tickLoop["Scaffold"] = function() {
				// Implementation for Scaffold
			};
		}
		else {
			if (player$1 && oldHeld != undefined) switchSlot(oldHeld);
			delete tickLoop["Scaffold"];
		}
	});
	new Module("Speed", function(callback) {
		if (callback) {
			let lastjump = 10;
			tickLoop["Speed"] = function() {
				lastjump++;
				const oldMotion = new Vector3$1(player$1.motion.x, 0, player$1.motion.z);
				const dir = getMoveDirection(0.39);
				lastjump = player$1.onGround ? 0 : lastjump;
				player$1.motion.x = dir.x;
				player$1.motion.z = dir.z;
				player$1.motion.y = player$1.onGround && dir.length() > 0 && speedauto[1] ? speedjump[1] : player$1.motion.y;
			};
		}
		else delete tickLoop["Speed"];
	});
	new Module("Sprint", function() {});
	new Module("Step", function() {});
	new Module("SurvivalMode", function(callback) {
		if (callback) {
			if (player$1) player$1.setGamemode(GameMode.fromId("survival"));
			survival.toggle();
		}
	});
	new Module("TextGUI", function() {});
	new Module("Timer", function(callback) {
		reloadTickLoop(callback ? 50 / timervalue[1] : 50);
	});
	new Module("Velocity", function() {});
	new Module("WTap", function() {});
})();
